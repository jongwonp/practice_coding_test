function solution(m, musicinfos) {
    let answer = '';
    // musicinfos의 요소를 [playTime, title, score, fullScore] 형식으로 만들기
    musicinfos = musicinfos.map(x => x.split(',')).map(x => {
        let [startTime, endTime, title, score] = x;

        startTime = (startTime[0] + startTime[1]) * 60 + parseInt(startTime[3] + startTime[4])
        endTime = (endTime[0] + endTime[1]) * 60 + parseInt(endTime[3] + endTime[4])
        let playTime = endTime - startTime;
        let noSharp = score.replace(/\#/g,''); // #을 제거한 악보
        let fullScore = '';

        if(score === noSharp){ // 악보에 #이 없는 경우
            fullScore = score.repeat(Math.floor(playTime / score.length)) + score.substring(0, playTime % score.length);
        } else {    // 악보에 #이 있는 경우
            let sharp = score.substring(0,(playTime % noSharp.length)).match(/#/g)
            if(sharp){
                fullScore = score.repeat(Math.floor(playTime / noSharp.length)) + score.substring(0, (playTime % noSharp.length) + sharp.length)
            } else {
                fullScore = score.repeat(Math.floor(playTime / noSharp.length)) + score.substring(0, (playTime % noSharp.length))
            }
        }

        return [playTime, title, score, fullScore]
    })

    let musicList = []; // 조건에 맞는 음악을 넣을 배열
    let musicLength = [];   // 조건에 맞는 음악의 재생 길이를 넣을 배열
    musicinfos.forEach(x => {
        const [playTime, title, score, fullScore] = x;

        if(fullScore.includes(m)){
            if(m.includes('#')){ // m에 #이 있으면 fullScore에 m이 있는 것 만으로 조건 만족
                musicList.push([title, fullScore])
                musicLength.push(fullScore.length)
            } else {
                const regex = new RegExp(`${m}#`,'g');
                if(fullScore.replace(regex,'').includes(m)){    // fullScore에서 m+'#' 을 없애도 m이 포함 된다면 조건 만족
                    musicList.push([title, fullScore])
                    musicLength.push(fullScore.length)
                }
            }
        }
    })

    musicList = musicList.filter(x => x[1].length === Math.max(...musicLength));    // 조건에 맞는 음악중 가장 재생 길이가 긴 음악만 선별함

    if(musicList.length === 0){
        answer = '(None)'
    } else {
        answer = musicList[0][0]
    }

    return answer
}

// m+'#' 걸러내도록 하는 부분(musicList를 채우는 부분)에서 헤매서 오래 걸렸다.


// 계속 TC 12번만 틀려서 다른 방법을 찾다가 아예 m +'#'을 소문자 한글자로 바꾸는 방법을 보고 그렇게 고쳐서 맞췄다.