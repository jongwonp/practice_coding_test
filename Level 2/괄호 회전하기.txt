function solution(s) {
    const LENGTH = s.length;
    let correctString = 0;

    for(i=0; i<LENGTH; i++){
        correctString = checkString(s,correctString);
        s = turnBracket(s);
    }

    return correctString;
}

const checkString = (string, n) => {
    let stackArr =[];
    let stringArr = string.split('');

    while(stringArr.length !== 0){
        if(stackArr.length === 0){
            stackArr.push(stringArr[0]);
            stringArr.shift();
        }
        if(stringArr[0].charCodeAt(0) - (stackArr[stackArr.length-1].charCodeAt(0))<=2 && stringArr[0].charCodeAt(0) - (stackArr[stackArr.length-1].charCodeAt(0))>0){
            stackArr.pop();
            stringArr.shift();
        }
        else{
            stackArr.push(stringArr[0]);
            stringArr.shift();
        }
    }
    return stackArr.length == 0 ? n+1 : n
}

const turnBracket = (string) => {
    string += string[0];
    string = string.slice(1);
    return string;
}


간신히 이렇게 짰는데 통과시간도 오래 걸리고 런타임 에러도 2개나 뜬다.
그냥 스택 안채우고 중간에 닫는 괄호가 먼저 나오면 끝나도록 해야겠다.



if(stackArr[0] == ')' || stackArr[0] == '}' || stackArr[0] == ']') break;
이 한 줄을 필요한 두 곳에만 추가해도 시간이 문제마다 다르지만 1/2~1/8 이상으로 줄었다. 그렇지만 런타임 에러는 여전하다.



열린괄호 한개 있는 경우를 생각 안했다. 길이가 1이면 탈락으로 추가한다.

(() 같은 경우도 실패한다.

스택에 push하고 나서 stringArr에 아무것도 남지 않은 경우에도 break하는 것을 추가했다.
길이가 1이면 탈락의 근본적인 해결책이다.


