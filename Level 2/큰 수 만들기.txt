function solution(number, k) {
    let arr = number.split('').map(v => Number(v));
    let arrToK = arr.filter((v,i) => i<k+1);
    let result = [];
    arr.splice(0,arrToK.indexOf(Math.max(...arrToK)));
    result.push(arr.shift());
    k = k-arrToK.indexOf(Math.max(...arrToK)); 

    while(k !== 0){
        arrToK = arr.filter((v,i) => i<k+1);
        arr.splice(0,arrToK.indexOf(Math.max(...arrToK)));
        result.push(arr.shift());
        k = k-arrToK.indexOf(Math.max(...arrToK));
    }
    result.push(...arr);
    return result.join('');
}

8개 통과, 2개 런타임 에러, 1개 core dumped가 나온다.
통과한 것중에서도 양 많은 것은 8230ms가 나온다.

일단 k번 인덱스 이내로 있는 최대값이 있는 인덱스의 그 전 인덱스 까지 잘라낸다.
그렇게 0번 인덱스가 된 최대값을 result 배열에 잘라서 넣는다.
잘라낸 만큼 k값을 줄인다.

그 다음부터는 
{k+1번 까지의 인덱스를 확인하고
그 안에 최대값이 있으면 그 앞까지의 인덱스까지 잘라내고 
0번 인덱스가 된 최대값을 result 배열에 잘라서 넣고
잘라낸 만큼 k값을 줄인다.}
이 과정을 k값이 0이 될 때까지 반복한다.

나름 앞부분에서만 계속 잘라내고 집어넣고 하는 것 같은데 오래걸린다.

아마 filter가 가장 오래걸리는 원인 인것 같다.




function solution(number, k) {
    let arr = number.split('');
    let result =[arr[0]];
    for(i=1; i<arr.length; i++){
        if(k == 0){
            result.push(arr[i]);
        }
        else {
            if(arr[i] > result[result.length-1]){
                while(arr[i] > result[result.length-1]){
                    result.pop();
                    k = k-1;
                    if(k == 0) break
                }
                result.push(arr[i]);
            }
            else if(arr[i] < result[result.length-1]){
                result.push(arr[i]);
            }
            else {
                result.push(arr[i]);
            }
        }
    }
    return result.join('');
}

쓸데없이 계속 반복 돌리지 않고 한번에 다 끝내도록 바꿨다.
그런데 마지막 문제가 실패가 뜬다.
마지막 문제가 [1000, 1] 처럼 k가 소모가 안되어서 길이가 너무 긴것이라고 한다.

k를 소모 시켰다.