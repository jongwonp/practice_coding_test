function solution(phone_number) {
    let arr = phone_number.split('');

    return arr.map((v,i) => {
        if(i<=arr.length-5){
            v = '*'
        }
        return v
    }).join('');
}

정규식 없이 쉽게 풀어봤음.




const 동적변수 = 'abc';
const regex = new RegExp(`[${동적변수}]`, 'g');

정규식에 변수 넣어서 사용하는 방법.


=========================================================

function hide_numbers(s) {
  return s.replace(/\d(?=\d{4})/g, "*");
} 

정규식 정답
\d 는 숫자를 의미.
(?=문자)는 이후에 '문자' 자리에 나올 것을 의미
\d{4}는 숫자 4개를 의미
/정규식/g 에서 g는 글로벌을 의미. 입력된 문자열 전체에서 찾는 것을 의미.

합쳐서 보면 정규식이 찾는 것은 [숫자]인데, 그 [숫자]는 뒤에 숫자 4개가 연속해 있는 [숫자]를 의미한다.

결국 문제에서 문자열은 모두 숫자이기 때문에 정규식이 가리키는 숫자들은 맨뒤 숫자 4개를 제외한 숫자들이다.


어릴적 학교에서 영어 배울때 뭐가 뭘 꾸며준다는 형식으로 배웠듯이 정규식도 그런 느낌으로 접근해야 할 것 같다.

추가로 이런 문제에서는 뒤의 숫자 4개에 초점 맞춘게 아니라
뒤에 숫자 4개가 달려있는 (앞의) 숫자 같이 초점을 역으로 맞추는 생각도 해봐야 할 듯.





const solution = n => [...n].fill("*",0,n.length-4).join("")

fill 잘 이용한 풀이





function hide_numbers(s){
  var result = "*".repeat(s.length - 4) + s.slice(-4);

  return result;
}

repeat 잘 이용한 풀이