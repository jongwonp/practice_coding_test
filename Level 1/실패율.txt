
객체는 정렬도 못하고 메서드라는 것 자체가 객체안에 있는 값 중에서 함수인 것을 의미하기에 
객체는 메서드를 사용할 수 없다.

그래서 무언가를 대응시키고 정렬을 하려고 할 때 객체를 만들기 보다는 배열 속 값 하나 하나를 객체로 만들어주는 것이 나중에 정렬하기도 좋다.

이 실패율 문제에서도 {'1': 3, '2': 1, ...} 이렇게 하면 단순 객체기에 Object.keys/values 말고는 아무 응용도 할 수 없다.

그래서 [{stage:'1', prob:0.125}, {...}, {...}, ...] 처럼 만들어 주어야 나중에 이 배열을 sort.((a,b) => b.prob - a.prob) 같이 정렬을 할 수도 있다. 



배열에 fill()이라는 메서드가 있음. 값 1개만 넣으면 그 값으로 배열을 가득 채우고, 값 2개 첫번째 값으로 넣은 인덱스...... 그냥 설명서 읽어보기

이 fill을 new Array(N).fill(0) 처럼 new Array와 같이 사용하면 인덱스가 N개 있는 배열은 모두 0으로 가득 채우는 것이다.





가장 추천 많이 받은 솔루션

function solution(N, stages) {
    let result = [];
    for(let i=1; i<=N; i++){
        let reach = stages.filter((x) => x >= i).length;
        let curr = stages.filter((x) => x === i).length;
        result.push([i, curr/reach]);
    }
    result.sort((a,b) => b[1] - a[1]);
    return result.map((x) => x[0]);
}



객체도 쓰길래 일단 복붙한 솔루션

function solution(N, stages) {
    let tempArr = stages;
    let answerObj = {};
    for ( let i = 1; i <= N; i++ ) {
        let top = tempArr.filter(el => el === i).length;
        let bottom = tempArr.length;
        answerObj[i] = top/bottom;
        tempArr = tempArr.filter(el => el !== i);    
    }
    return Object.entries(answerObj).sort((a,b) => b[1] - a[1]).map(v => +v[0])
}


